)
# Check to see if our conversion worked
inherits(sales_csv$Order.Date
, c("Date")
)
str(sales_csv$Order.Date)
View(sales_csv)
sales_csv[,5]
sales_csv[1:10,5]
first_class_df = sales_csv[sales_csv$Ship.Mode=='First Class',]
View(first_class_df)
first_class_df = sales_csv[(sales_csv$Ship.Mode=='First Class')&(sales_csv$City=='Henderson') ,]
View(first_class_df)
first_class_df = sales_csv[(sales_csv$Ship.Mode=='First Class')|(sales_csv$City=='Henderson') ,]
View(first_class_df)
# Create a list containing strings, numbers, vectors and a logical values.
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5)
# Create a list containing strings, numbers, vectors and a logical values.
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5)
# Get the first list element
list_data[[1]]
# Get the third list element (a vector!)
list_data[[3]]
# Get the last element of the vector
list_data[[3]][3]
# We can also name the elements of the list
names(list_data) <- c("Male", "Female", "number_vector","logical", "numeric")
print(list_data)
# Create a list containing strings, numbers, vectors and a logical values.
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5)
# Create a list containing strings, numbers, vectors and a logical values.
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5,
read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
)
# Get the first list element
list_data[[1]]
# Get the last element of the vector
list_data[[3]][3]
list_data[[6]]$City[1]
# We can also name the elements of the list
names(list_data) <- c("Male", "Female", "number_vector","logical", "numeric",'sales_data')
print(list_data)
list_data$sales_data$Ship.Mode[5]
################################if else################################
y1 <- c('Apple',"Orange","Bananna")
if("Mango" %in% y1) {
print("Mango is found")
} else {
print("Mango is not found")
}
if("Mango" %in% y1) {
print("Mango is found")
} else if('Bananna' %in% y1){
print("Bananna is found")
} else {
print('Mango and Bananna is not found')
}
ifelse('Mango' %in% y1        # condition
,"Mango is found"      # value if true
,"Mango is not found"  # value if false
)
ifelse('Mango' %in% y1                            # condition
,"Mango is found"                          # value if true
,ifelse('Bananna' %in% y1                  # else if condition (if 1st is false)
,'Bananna is found'                # 2nd value if true
,'Mango and Bananna is not found'  # value if both are false
)
)
ifelse('Mango' %in% y1                            # condition
,"Mango is found"                          # value if true
,ifelse('A' %in% y1                  # else if condition (if 1st is false)
,'Bananna is found'                # 2nd value if true
,'Mango and Bananna is not found'  # value if both are false
)
)
# appending to a vector
x3 <- numeric()
for(i in 1:10) {    # Head of for-loop
x3 <- c(x3, i^2)  # Code block
}
print(x3)
x4 <- character()                                          # Create empty data object
loop_work <- 0
for(i in 1:5) {                                            # Head of first for-loop
for(j in 1:5) {                                          # Head of nested for-loop
loop_work <- loop_work + 1
x4 <- c(x4, paste(LETTERS[i], letters[j], sep = "_"))  # Code block
}
}
x4
library(hash)
h <- hash()
x5 <- c()
hash_work <- 0
for(i in 1:5){
hash_work <- hash_work + 1
h[LETTERS[i]] <- letters[1:5]
}
h <- hash()
x5 <- c()
hash_work <- 0
for(i in 1:5){
hash_work <- hash_work + 1
h[LETTERS[i]] <- letters[1:5]
}
for(j in 1:length(h)){
hash_work <- hash_work + 1
x5 <- c(x5,paste(names(h)[j],h[[LETTERS[j]]],sep='_'))
}
print(hash_work)
print(loop_work)
for(i in 1:10) { # Head of for-loop
x1 <- i^2      # Code block
print(x1)      # Print results
}
x2 <- c("Samsung", "Apple", "Meta", "Google", "Microsoft")
x2 <- c("Samsung", "Apple", "Meta", "Google", "Microsoft")  # Create character vector
for(i in x2) {     # Loop over character vector
print(paste("The name", i, "consists of", nchar(i), "characters."))
}
x3 <- numeric()
# appending to a vector
x3 <- numeric()
for(i in 1:10) {    # Head of for-loop
x3 <- c(x3, i^2)  # Code block
}
print(x3)
# nested for loop (bad bad bad
# --> need to using hashing to eliminate complexity)
x4 <- character()                                          # Create empty data object
loop_work <- 0
for(i in 1:5) {                                            # Head of first for-loop
for(j in 1:5) {                                          # Head of nested for-loop
loop_work <- loop_work + 1
x4 <- c(x4, paste(LETTERS[i], letters[j], sep = "_"))  # Code block
}
}
x4
?hash
h <- hash()
x5 <- c()
hash_work <- 0
for(i in 1:5){
hash_work <- hash_work + 1
h[LETTERS[i]] <- letters[1:5]
}
View(h)
names(h)
LETTERS[j]
LETTERS[j]
j <- 1
[LETTERS[j]
LETTERS[j]
h[['A']]
c(x5,paste(names(h)[j],h[[LETTERS[j]]],sep='_'))
for(j in 1:length(h)){
hash_work <- hash_work + 1
x5 <- c(x5,paste(names(h)[j],h[[LETTERS[j]]],sep='_'))
}
print(hash_work)
print(loop_work)
#make sure we just made the same two vectors
all(x4 == x5)
# for loop with break statement
for(i in 1:10) {                  # Head of for-loop
x6 <- i^2                       # Code block
print(x6)                       # Print results
if(i >= 5) {                    # Conditionally stop for-loop
break                         # Using break-statement
}
}
# for loop with next statement (skip)
for(i in 1:10) {                    # Head of for-loop
if(i %in% c(1, 3, 5, 7, 9)) {           # Conditionally skip iteration
next                            # Using next-statement
}
x7 <- i^2                         # Code block
print(x7)                         # Print results
}
# iterating over a dataframe
iris_new1 <- iris
for(i in 1:ncol(iris_new1)) {                              # Head of for-loop
if(grepl("Width", colnames(iris_new1)[i])) {             # Logical condition
iris_new1[ , i] <- iris_new1[ , i] + 1000              # Code block
}
}
head(iris_new1)
head(iris)
i <- 1 # set the initial value
while (i < 6) {   # Head of while loop + test condition
print(i)        # Code block
i = i+1         # Code block (make sure you add 1 or the condition will not be met!)
}
?apply
iris[1:5,0:4]
# row sums for the 1st 5 rows and 1st 4 columns of IRIS
apply(iris[1:5,0:4],MARGIN=1,FUN=sum)
# col means for the 1st 4 columns of IRIS
apply(iris[,0:4],MARGIN=2,FUN=mean)
# col means for the 1st 4 columns of IRIS
apply(iris[,1:4],MARGIN=2,FUN=mean)
# Custom function for apply
square <- function(x){
x^2
}
# row & col custom function for the 1st 5 rows and 1st 4 columns of IRIS
apply(iris[1:5,1:4],MARGIN=c(1,2),FUN=square)
iris[1:5,1:4]
##################################Functions##################################
# this is an example function
my_sum <- function(num1, num2) {
# document your function here
# what the function does
# function inputs and outputs
some_calculated_output <- (num1 + num2 )
return(some_calculated_output) # return statement
}
my_sum(50,30)
# Using default values for arguments
my_sum2 <- function(num1=20, num2=30) {
# sum with default values for each input
some_calculated_output <- (num1 + num2 )
return(some_calculated_output) # return statement
}
my_sum2()
my_sum2(40)
my_sum2(num1,40)
my_sum2,40)
my_sum2(),40)
my_sum2(,40)
# Using an ifelse to ensure inputs are numeric
my_sum3 <- function(num1, num2=30) {
# sum two numbers
# if else to handle non-numeric values
if(is.numeric(num1)&is.numeric(num2)){
output <- (num1 + num2)
} else{
stop("ERROR: Both inputs must be numeric")
}
return(output) # return statement
}
my_sum3(num1="a",num2=4)
my_sum3(num1=3)
library(dplyr)
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
names(sales)
?renmae
?rename
sales %>% # the pipe  (%>%) allows you to write multi-line functions passing the same data to each line of code
rename(Row.ID = ï..Row.ID) %>%
slice_max(Row.ID) %>% #slice the rows with the maximum Row.ID (should be one row)
select(Row.ID) # select the single column Row.ID
library(dplyr)
library(dplyr)
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
names(sales)
?rename
sales %>% # the pipe  (%>%) allows you to write multi-line functions passing the same data to each line of code
rename(Row.ID = ï..Row.ID) %>%
slice_max(Row.ID) %>% #slice the rows with the maximum Row.ID (should be one row)
select(Row.ID)
sales %>%
group_by(Segment) %>%
summarize(sum_of_sales = sum(Sales))
#EX2
#multiple groups & multiple metrics
sales %>%
group_by(Segment,Category) %>%
summarize(sales=sum(Sales),
transactions = n(),
distinct_products = n_distinct(Product.Name),
average_transaction_sale = sum(sales) / n())
?str_split
stringr::str_split(sales$Customer.Name,' ',simplify = T)
### Mutate
sales <- sales %>%
mutate(Order.Date = as.Date(Order.Date,'%m/%d/%Y'),
Ship.Date = as.Date(Ship.Date, '%m/%d/%Y'),
First.Name = stringr::str_split(Customer.Name,' ',simplify = T)[,1], #must use string simplify = TRUE to properly split in mutate
Last.Name = stringr::str_split(Customer.Name, ' ',simplify = T)[,2] #must use string simplify = TRUE to properly split in mutate
)
sales$First.Name[1:5]
inherits(sales$Order.Date, 'Date')
###Joins and Unions
# data frame 1
df1 = data.frame(CustomerId = c(1:6), Product = c("Oven","Television","Mobile","WashingMachine","Lightings","Ipad"))
df1
# data frame 2
df2 = data.frame(CustomerId = c(2, 4, 6, 7, 8), State = c("California","Newyork","Santiago","Texas","Indiana"))
df2
left_df <- df1 %>%
left_join(df2,by='CustomerId')
left_df
right_df <- df1 %>%
right_join(df2,by='CustomerId')
right_df
#full join, all keys returned
full_df <- df1 %>%
full_join(df2,by='CustomerId')
full_df
#inner join, only matches on both returned
inner_df <- df1 %>%
inner_join(df2,by='CustomerId')
inner_df
#binding columns and rows (unions)
df1 %>% bind_cols(left_df)
#stacking data frames ( bind rows)
left_df %>% bind_rows(right_df)
library(tidyr)
#the relig_income dataset comes with the tidyr package
data(relig_income)
head(relig_income)
?pivot_longer
relig_long <- relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
head(relig_long)
#fish_ecounters also comes with the tidyr package
data(fish_encounters)
head(fish_encounters)
fish_wide <- fish_encounters %>%
pivot_wider(names_from = station, values_from = seen)
head(fish_wide)
fish_encounters %>%
pivot_wider(names_from = station, values_from = seen) %>%
drop_na()
wide_fish_na <- fish_encounters %>%
pivot_wider(names_from = station, values_from = seen) %>%
dplyr::mutate_at(c(4:12), ~replace_na(.,0))
head(wide_fish_na)
#or replace them
#simply drop them
#we need to use dplyr's mutate_at to select columns 4 to 12 and
#tidyr's replace_na to replace all of those columns with 0
wide_fish_na <- fish_encounters %>%
pivot_wider(names_from = station, values_from = seen) %>%
dplyr::mutate_at(c(5:12), ~replace_na(.,0))
head(wide_fish_na)
#or replace them
#simply drop them
#we need to use dplyr's mutate_at to select columns 4 to 12 and
#tidyr's replace_na to replace all of those columns with 0
wide_fish_na <- fish_encounters %>%
pivot_wider(names_from = station, values_from = seen) %>%
dplyr::mutate_at(c(8:12), ~replace_na(.,0))
head(wide_fish_na)
#splitting cells
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
sales <- sales %>%
separate(Customer.Name,
sep=' ',
into=c('First.Name','Last.Name')
,extra='merge')
head(data.frame(sales$First.Name[1:5],sales$Last.Name[1:5]))
#conversely, we can combine these columns back together
sales <- sales %>%
unite(col = 'Customer.Name', First.Name:Last.Name,sep='_')
head(sales$Customer.Name)
library(ggplot2)
library(dplyr)
sales <- read.csv("Week_4/Data/sales.csv", stringsAsFactors=FALSE)
#basic example
sales <- sales %>%
mutate(Order.Date = as.Date(Order.Date,'%m/%d/%Y'),
Ship.Date = as.Date(Ship.Date, '%m/%d/%Y')
)
#simple bar chart
ggplot(sales,aes(x=Category)) +
geom_bar()
?aes
#simple bar chart
sales %>%
ggplot(aes(x=Category)) +
geom_bar()
#axis labels & title with a custom scale & color
ggplot(sales,aes(x=Category,fill=Category)) +
geom_bar() +
labs(x='Categories',
y='Transactions',
title='Transactions by Category') +
scale_y_continuous(breaks=c(1500,2000,4000,6000))
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(Category.~) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 90)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 15)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_color_brewer(palette = "Blues")+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_fill_brewer(palette = "Blues")+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_color_continuous(palette = "Blues")+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
?scale_fill_continuous
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_color_continuous(type = "gradient")+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
?scale_colour_brewer
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_fill_brewer(palette = 1)+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_fill_brewer(palette = 2)+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_color_brewer(palette = 'reds')+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
scale_color_brewer(palette = 1)+
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
#multiple layers, faceting, and adjusting labels
ggplot(sales) +
geom_point(aes(x=Sales,y=Profit,color=Discount)) +
geom_smooth(method='lm',aes(x=Profit,y=Sales)) +
facet_grid(.~Category) +
scale_y_continuous(labels=scales::dollar_format()) +
theme(axis.text.x = element_text(angle = 45)) +
labs(title='Sales to Profit')
install.packages("caret")
