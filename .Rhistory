(x != z) & (y != z)
x + 2y == z
x + 2*y == z
test_vector <- c(1,5,12:19)
test_vector <- c(1,4,12:22)
(x %in% test_vector) | (y %in% test_vector) | (z %in% test_vector)
test_vector[x]
x == test_vector
(x == test_vector)[TRUE]
(z == test_vector)[TRUE]
(z == test_vector)
test_vector[(z == test_vector)]
test_vector[(x %in% test_vector) | (y %in% test_vector) | (z %in% test_vector)]
test_vector[((x %in% test_vector) | (y %in% test_vector) | (z %in% test_vector))]
test_vector[((x %in% test_vector) || (y %in% test_vector) || (z %in% test_vector))]
test_vector[(((z %in% test_vector))]
test_vector[(z %in% test_vector)]
test_vector[z %in% test_vector]
test_vector[z %in% test_vector]
test_vector[(z == test_vector)]
test_vector[(x == test_vector)|(z == test_vector)]
test_vector[(y == test_vector)|(x == test_vector)|(z == test_vector)]
test_vector[(x==test_vector)|(y==test_vector)|(z=test_vector)]
z<-20
test_vector[(x==test_vector)|(y==test_vector)|(z==test_vector)]
test_vector[(x==test_vector)&(y==test_vector)&(z==test_vector)]
test_vector[(x==test_vector)||(y==test_vector)||(z==test_vector)]
test_vector[(x==test_vector)|(y==test_vector)|(z==test_vector)]
test_vector <- c(1,5,11:22)
#your code below
test_vector[(x==test_vector)|(y==test_vector)|(z==test_vector)]
number_vector <- 1:10
number_vector[[c(1,5,10)] ]
number_vector[c(1,5,10) ]
number_vector <- c(1,2,3,5,8,13,21)
number_vector <- c(1,2,3,5,8,13,21,35,56,91)
number_vector[c(1,5,10) ]
13+21
34+21
55+34
number_vector[c(1,5,10) ]
?fib
fib  <- function(n)
{
if (length(n) > 1) return(sapply(n, fib)) # accept a numeric vector
if (n == 1) return(1) # first seed value
if (n == 2) return(1) # second seed value
return(fib(n-1)+fib(n-2)) # use recursion
}
fib_vec <- fib(10)
fib_vec[c(1,5,10)]
fib  <- function(n)
{
if (length(n) > 1) return(sapply(n, fib)) # accept a numeric vector
if (n == 1) return(1) # first seed value
if (n == 2) return(1) # second seed value
return(fib(n-1)+fib(n-2)) # use recursion
}
fib_vec <- fib(10)
fib_vec <- fib(1:10)
fib_vec[c(1,5,10)]
fib_vec [1] #will slice the first element
fib_vec [1:10] #will slice the first 10 elements
fib_vec[c(1,5,10)]  #will slice the 1st, 5th, and 10th elements
fib_vec[1] #will slice the first element
fib_vec[1:10] #will slice the first 10 elements
fib_vec[c(1,5,10)]  #will slice the 1st, 5th, and 10th elements
fib_vec[which(8)]
?which
which(fib_vec,8)
which(fib_vec == 8)
which(fib_vec == 8)
which.max(fib_vec)
which.min(fib_vec)
fib_vec[-1]
fib_vec[-10]
fib_vec[-2:-10]
fib_vec[-10:-2]
fib_vec[-10:-3]
fib_vec[-10:-4]
fib_vec[-11]
fib_vec[-10]
len(fib_vec)
length(fib_vec)
fib_vec[-8] #remove the 8th element
fib_vec[-1:-10] #remove the first through 10th element
fib_vec[c(-1,-5,-10)] #remove the first, 5th, and 10th element
C_0 = 1;
C_n = {(4*10 - 2)*C_(n-1)}/(10+1)
catalan <- function(n){
if (n == 0){
return(1)
}
else
return(((4*n-2)*catalan_num_recr(n-1))/(n+1))
}
catalan_vec <- catalan(1:10)
catalan_vec <- catalan(1)
catalan <- function(n){
if (n == 0){
return(1)
}
else
return(((4*n-2)*catalan(n-1))/(n+1))
}
catalan_vec <- catalan(1)
catalan_vec <- catalan(1:10)
catalan_vec
catalan_vec <- Vectorize(catalan)(1:10)
catalan_vec
?Vectorize
catalan <- function(numbs) {
cat <- vector("numeric", length(max(numbs)) + 1)
for (i in 0:max(numbs)) {
if (i == 0) {
cat[i+1] <- 1
} else {
cat[i+1] <- ((4*i - 2)*cat[i])/(i + 1)
}
}
cat[numbs + 1]
}
catalan <- function(n) {
cat <- vector("numeric", length(max(n)) + 1)
for (i in 0:max(n)) {
if (i == 0) {
cat[i+1] <- 1
} else {
cat[i+1] <- ((4*i - 2)*cat[i])/(i + 1)
}
}
cat[n + 1]
}
catalan <- function(n) {
cat <- vector("numeric", length(max(n)) + 1)
for (i in 0:max(n)) {
if (i == 0) {
cat[i+1] <- 1
} else {
cat[i+1] <- ((4*i - 2)*cat[i])/(i + 1)
}
}
return(cat[n + 1])
}
#initilize vatalan vector
catalan_vec <- catalan(1:10)
#vector addition
new_vec <- fib_vec + catalan_vec
fib_vec + catalan_vec
#vector subtraction
catalan_vec - fib_vec
catalan_vec * fib_vec
#vector division
catalan_vec/fib_vec
#vector sorting
sort(catalan_vec)
#vector sorting
sort(catalan_vec,decreasing=TRUE)
#vector addition
fib_vec + catalan_vec
#vector subtraction
catalan_vec - fib_vec
#vector multiplication
catalan_vec * fib_vec
#vector division
catalan_vec/fib_vec
fib_vec + catalan_vec#vector addition
catalan_vec - fib_vec #vector subtraction
catalan_vec * fib_vec#vector multiplication
catalan_vec/fib_vec#vector division
?any
any(catalan_vec==1)
all(catalan_vec==1) #all of the values qequals 1
length(catalan_vec)
rep(catalan_vec,3)
rep(catalan_vec,2) #repeat the vector 2 times
?seq
seq(from=min(catalan_vec),to=max(catalan_vec))
seq(from=1,to=10)
seq(from=1,to=10,by=2) #create a vector from 1 to 10
c(catalan_vec,fib_vec)#combining vectors
any(catalan_vec==1) #any of the values equals 1
all(catalan_vec==1) #all of the values qequals 1
sort(catalan_vec,decreasing=TRUE)#vector sorting
length(catalan_vec) #find the length of the vector
rep(catalan_vec,2) #repeat the vector 2 times
seq(from=1,to=10,by=2) #create a vector from 1 to 10 by 2
?`matrix-class`
# Elements are arranged sequentially by row.
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
print(M)
# Elements are arranged sequentially by column.
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(N)
# Define the column and row names.
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P)
View(M)
###Accessing elements of a Matrix
# Define the column and row names.
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
# Create the matrix.
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
# Access the element at 3rd column and 1st row.
print(P[1,3])
# Access the element at 2nd column and 4th row.
print(P[4,2])
# Access only the  2nd row.
print(P[2,])
# Access only the 3rd column.
print(P[,3])
?data.frame
###Creating data frames using the data.frame function.
# Create the data frame.
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Print the data frame.
print(emp.data)
summary(emp.data)
# Summarize the data frame.
summary(emp.data)
str(emp.data)
sales <- read.csv("C:/Users/jlowh/Documents/DSE5002/Week_2/Data/sales.csv", stringsAsFactors=FALSE)
View(sales)
sales <- read.csv("~/Week_2/Data/sales.csv",
stringsAsFactors=FALSE)
getwd()
sales <- read.csv("/Week_2/Data/sales.csv",
stringsAsFactors=FALSE)
sales <- read.csv("Week_2/Data/sales.csv",
stringsAsFactors=FALSE)
?read.csv
sales <- read.delim("C:/Users/jlowh/Documents/DSE5002/Week_2/Data/sales.txt", stringsAsFactors=FALSE)
View(sales)
sales_csv <- read.csv("Week_2/Data/sales.csv",
stringsAsFactors=FALSE)
sales_tab_delim <- read.delim("Week_2/Data/sales.txt",
stringsAsFactors=FALSE)
library(readxl)
sales <- read_excel("Week_2/Data/sales.xlsx",
sheet = "sales")
View(sales)
sales_excel <- readxl::read_excel("Week_2/Data/sales.xlsx"
,sheet = "sales"
)
summary(sales_csv)
?read.delim
# Get the structure
str(sales_csv)
sales_csv$Order.Date <- as.Date(sales_csv$Order.Date,format='%m/%d/%Y')
?as.Date
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
sales_tab_delim <- read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
sales_excel <- readxl::read_excel("Week_2/Data/sales.xlsx"
,sheet = "sales"
)
?as.character
View(sales_csv)
?stringr::str_split_fixed
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='-{2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='(-){2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='(\-){2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='({-}){2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='{-}{2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='[-]{2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='[-]{1}',n=2)
stringr::str_split(string=sales_csv$Product.ID,pattern='[-]{2}')
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='[-]{2}')
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='[-]{2}',n=3)
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='[-]{2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='(\\-){2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='(.+)-(\d+)',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='(.+)-(\[::digit::]+)',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='(.+)-([::digit::]+)',n=2)
stringr::str_split(string=sales_csv$Product.ID,pattern='(.+)-([::digit::]+)')
stringr::str_split(string=sales_csv$Product.ID[1],pattern='(.+)-([::digit::]+)')
stringr::str_split(string=sales_csv$Product.ID[1],pattern='(?i)(?:.*?-){2}')
stringr::str_split_fixed(string=sales_csv$Product.ID[1],pattern='(?i)(?:.*?-){2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID[1],pattern='(?i)(*?-){2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID[1],pattern='(?:.*?-){2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID[1],pattern='(?i)(?-){2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID[1],pattern='(?i)(-){2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID[1],pattern='(?:.*?-){2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID[1],pattern='^([-]+-[-]+)',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID[1],pattern='([-]+-[-]+)',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID[1],pattern='(?:.*?-){2}',n=2)
stringr::str_split_fixed(string=sales_csv$Product.ID[1],pattern='-',n=3)
temp_char <- stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='-',n=3)
View(temp_char)
View(temp_char)
stringr(temp_char[,1],temp_char[,2],sep='-')
stringr::str_glue(temp_char[,1],temp_char[,2],sep='-')
stringr::str_glue_data(temp_char[,1],temp_char[,2],sep='-')
stringr::str_glue_data(temp_char[,1:2],sep='-')
temp_char[,1] & temp_char[,2]
paste(temp_char[,1], temp_char[,2],sep='-')
temp_char <- stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='-',n=3)
sales_csv$Product <- paste(temp_char[,1], temp_char[,2],sep='-')
sales_csv$Product.Number = temp_char[,3]
View(sales_csv)
print(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
)
?print
print(
paste(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep="\n"
)
)
print(
paste(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep="\r\n"
)
)
print(
paste(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep="\n\r"
)
)
?cat
cat(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep="\n\r"
)
# Splitting strings to create two new columns
## String split fixed will split the product id column into three columns in a matrix by the '-'
temp_char <- stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='-',n=3)
# To recreate our Product ID we just paste the individual vectors together with the '-' seperator
sales_csv$Product <- paste(temp_char[,1], temp_char[,2],sep='-')
# Our product number is now just the third column of the matrix
sales_csv$Product.Number <- temp_char[,3]
cat(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep="\n\r"
)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
str(sales_csv$Order.Date)
?is.date
is.Date
inherits(sales_csv$Order.Date, c("Date"))
?is.Date
# Get the structure of the date colume
str(sales_csv$Order.Date)
# Check to see if Order.Date is a date
inherits(sales_csv$Order.Date, c("Date"))
# Using the table in our notes, convert the character to a date obeject.
sales_csv$Order.Date <- as.Date(sales_csv$Order.Date,format='%m/%d/%Y')
# Check to see if our conversion worked
inherits(sales_csv$Order.Date, c("Date"))
str(sales_csv$Order.Date)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
# Convert the Order.Date string to Date format
# Get the structure of the date column
str(sales_csv$Order.Date)
# Check to see if Order.Date is a date
inherits(sales_csv$Order.Date, c("Date"))
# Using the table in our notes, convert the character to a date obeject.
sales_csv$Order.Date <- as.Date(sales_csv$Order.Date,format='%m/%d/%Y')
# Check to see if our conversion worked
inherits(sales_csv$Order.Date, c("Date"))
str(sales_csv$Order.Date)
sales_csv$Region <- factor(sales_csv$Region)
levels(sales_csv$Region)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
is.factor(sales_csv$Region)
unique(sales_csv$Region)
View(sales_csv)
# Reorder the levels
sales_csv$Region <- factor(sales_csv$Region,levels=c('East','West','Central','South'))
levels(sales_csv$Region)
table(sales_csv$Region)
barplot(table(sales_csv$Region))
# Read csv files (comma separated value)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
# Check whether Region is a factor & find the unique values.
is.factor(sales_csv$Region)
unique(sales_csv$Region)
# Convert the Region column to a factor and extract the levels
sales_csv$Region <- factor(sales_csv$Region)
is.factor(sales_csv$Region)
levels(sales_csv$Region)
barplot(table(sales_csv$Region))
# Reorder the levels
sales_csv$Region <- factor(sales_csv$Region
,levels=c('West','East','Central','South')
)
levels(sales_csv$Region)
barplot(table(sales_csv$Region))
sales_tab_delim <- read.delim("Week_2/Data/sales.prn"
,stringsAsFactors=FALSE
,sep = " "
)
sales <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
?write.csv
sales <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
write.table(sales,'Week_2/Data/sales_pipe.txt',sep="|")
sales <- read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
View(sales)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
View(sales)
library(stringr)
library(lubridate)
library(forcats)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
library(stringr)
library(lubridate)
library(forcats)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
library(stringr)
library(lubridate)
library(forcats)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
library(stringr)
library(lubridate)
library(forcats)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
View(sales)
columns()
columns(sales)
column.names(sales)
colnames(sales)
colnames(sales)[1]
colnames(sales)[1] <- 'Row.ID'
View(sales)
sales2 <- read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
sales2 <- read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
sales2 <- read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
sales$Ship.Date <- as.Date(sales$Ship.Date,'%m/%d/%Y')
format(sales$Ship.Date,'%B %d %Y')
sales$Ship.Date <- format(sales$Ship.Date,'%B %d %Y')
write.table(sales, file = "Week_2/Data/sales_pipe.txt", sep = "|")
sales <- read.delim("Week_2/Data/sales_pipe.txt"
,stringsAsFactors=FALSE
,sep = "|"
)
View(sales)
