View(names_mat)
names[,1=='Sarah']
names[,1]
names_mat[,1=='Sarah']
names_mat[,1]['Sarah']
View(names_mat)
names_mat[,1]['Bill']
names_mat[,1]
first_names <- names_mat[,1]
first_names['Bill']
first_names[grepl("Bill", first_names)]
length(first_names[grepl("Bill", first_names)])
View(sales)
View(sales)
View(sales)
grepl('table',sales$Product.Name)
sum(grepl('table',sales$Product.Name))
View(sales)
unique(sales$State)
factor(sales$State)
sales$State<-factor(sales$State,ordered = TRUE)
levels(sales$State)
table(sales$State)
View(sales)
mean(sales$Ship.Date - sales$Order.Date)
View(sales)
texas <- sales[,sales$State == 'Texas']
texas <- sales[sales$State == 'Texas',]
View(texas)
texas$Category <- factor(texas$Category,ordered=TRUE)
table(texas$Category)
barplot(table(texas$Category))
View(sales)
?table
table(sales$Region,sales$Profit)
table(sales$Region,mean(sales$Profit))
aggregate(sales$Profit,by=sales$Region,mean)
?aggregate
aggregate(sales$Profit,by=list(Region=sales$Region),mean)
View(sales)
View(sales)
sales[sales$Customer.Name=='Darrin Van Huff',]
sales[sales$Customer.Name=='Darrin Van Huff',sales$Profit]
sales[sales$Customer.Name=='Darrin Van Huff',mean(sales$Profit)]
sales[sales$Customer.Name=='Darrin Van Huff',]$Profit
mean(sales[sales$Customer.Name=='Darrin Van Huff',]$Profit)
mean(sales[sales$Customer.Name=='Darrin Van Huff','Profit'])
?aggregate
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5)
print(list_data)
list_data[[1]]
list_data[[3]]
list_data[[3]][3]
# Create a list containing strings, numbers, vectors and a logical values.
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5)
print(list_data)
list_data[[1]]
list_data[[3]]
list_data[[3]][3]
# Create a list containing strings, numbers, vectors and a logical values.
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5)
# Get the first list element
list_data[[1]]
# Get the third list element (a vector!)
list_data[[3]]
# Get the last element of the vector
list_data[[3]][3]
names(list_data) <- c("Male", "Female", "number_vector","logical", "numeric")
# We can also name the elements of the list
names(list_data) <- c("Male", "Female", "number_vector","logical", "numeric")
print(list_data)
two_sum <- function(nums,target){
for i in length(nums){
for j in range(i + 1, length(nums)){
if nums[j] == target - nums[i]{
return [i, j]
}
}
}
}
two_sum <- function(nums,target){
for i in length(nums){
for j in range(i + 1, length(nums)){
if nums[j] == target - nums[i]{
return [i, j]
}
}
}
}
two_sum <- function(nums,target){
for( i in length(nums) ){
for( j in range(i + 1, length(nums)) ){
if (nums[j] == target - nums[i]){
return [i, j]
}
}
}
}
two_sum(nums_vector,target)
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
two_sum <- function(nums,target){
for( i in length(nums) ){
for( j in range(i + 1, length(nums)) ){
if (nums[j] == (target - nums[i])){
return [i, j]
}
}
}
}
two_sum(nums_vector,target)
nums <- c(5,7,12,34,6,10,8,9)
target <- 13
for( i in length(nums) ){
for( j in range(i + 1, length(nums)) ){
if (nums[j] == (target - nums[i])){
return [i, j]
}
}
}
for( i in length(nums) ){
for( j in range(i + 1, length(nums)) ){
if (nums[j] == (target - nums[i])){
return c(i, j)
}
}
}
for( i in length(nums) ){
for( j in range(i + 1, length(nums)) ){
if (nums[j] == (target - nums[i])){
return c(i, j)
}
}
}
for( i in length(nums) ){
for( j in range(i + 1, length(nums)) ){
if (nums[j] == (target - nums[i])){
return(c(i, j))
}
}
}
target - nums[i]
nums[j] == (target - nums[i])
(nums[j]) == (target - nums[i])
nums[j]
for( i in length(nums) ){
for( j in (i + 1, length(nums)) ){
if (nums[j] == (target - nums[i])){
return(c(i, j))
}
}
}
}
for( i in length(nums) ){
for( j in (i + 1, length(nums)-1) ){
if (nums[j] == (target - nums[i])){
return(c(i, j))
}
}
}
for( j in (i + 1, length(nums)) )
for( i in length(nums) ){
for( j in ((i + 1):length(nums)) ){
if (nums[j] == (target - nums[i])){
return(c(i, j))
}
}
}
nums[j]
i < - 1
i <- 1
for( i in length(nums) ){
for( j in ((i + 1):length(nums)) ){
if (nums[j] == (target - nums[i])){
return(c(i, j))
}
}
}
range(nums)
for( i in 1:length(nums) ){
for( j in ((i + 1):length(nums)) ){
if (nums[j] == (target - nums[i])){
return(c(i, j))
}
}
}
two_sum <- function(nums,target){
for( i in 1:length(nums) ){
for( j in ((i + 1):length(nums)) ){
if (nums[j] == (target - nums[i])){
return(c(i, j))
}
}
}
}
nums <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
nums <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
hash_table <- list()
for i in 1:length(nums){
hash_table[[nums[i]]] <- i
}
hash_table <- list()
for( i in 1:length(nums)){
hash_table[[nums[i]]] <- i
}
View(hash_table)
hash_table[[5]]
5 %in% hash_table
hash_table[complement]
nums[i]
complement <- target - nums[i]
(hash_table[complement] != i)
(hash_table[[complement]] != i)
hash_table[[complement]]
(complement %in% hash_table)
hash_table <- list()
for( i in 1:length(nums)){
hash_table[[nums[i]]] <- i
}
hash_table[[!is.null()]]
hash_table[[!is.null(hash_table)]]
hash_table[!is.null(hash_table)]
two_sum <- function(nums,target){
hash_table <- list()
for( i in 1:length(nums)){
hash_table[[nums[i]]] <- i
}
for i in 1:length(nums){
complement <- target - nums[i]
if( (complement %in% hash_table) & (hash_table[[complement]] != i) ){
return(c(i,hash_table[complement]))
}
}
}
hash_table <- list()
for( i in 1:length(nums)){
hash_table[[nums[i]]] <- i
}
for i in 1:length(nums){
complement <- target - nums[i]
if( (complement %in% hash_table) & (hash_table[[complement]] != i) ){
print(c(i,hash_table[complement]))
}
}
for( i in 1:length(nums)){
complement <- target - nums[i]
if( (complement %in% hash_table) & (hash_table[[complement]] != i) ){
print(c(i,hash_table[complement]))
}
}
two_sum <- function(nums,target){
hash_table <- list()
for( i in 1:length(nums)){
hash_table[[nums[i]]] <- i
}
for( i in 1:length(nums)){
complement <- target - nums[i]
if( (complement %in% hash_table) & (hash_table[[complement]] != i) ){
return(c(i,hash_table[[complement]]))
}
}
}
nums <- c(5,7,12,34,6,10,8,9)
target <- 13
two_sum(nums_vector,target)
nums <- c(9,4,7,12,15,6,2)
target <- 24
two_sum(nums_vector,target)
two_sum <- function(nums,target){
hash_table <- list()
for( i in 1:length(nums)){
hash_table[[nums[i]]] <- i
}
for( i in 1:length(nums)){
complement <- target - nums[i]
if( (complement %in% hash_table) & (hash_table[[complement]] != i) ){
return(c(i,hash_table[[complement]]))
}
}
}
nums <- c(9,4,7,12,15,6,2)
target <- 24
two_sum(nums_vector,target)
two_sum(nums,target
)
hash_table <- list()
for( i in 1:length(nums)){
hash_table[[nums[i]]] <- i
}
for( i in 1:length(nums)){
complement <- target - nums[i]
if( (complement %in% hash_table) & (hash_table[[complement]] != i) ){
return(c(i,hash_table[[complement]]))
}
}
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
h <- hash()
vec <- c()
for(i in seq_along(nums_vector)) {
vec[i] <- target - nums_vector[i]
h[nums_vector[i]] <- vec[i]
if(as.character(nums_vector[i]) %in% keys(h)) {
first <- h[[as.character(nums_vector[i])]]
second <- nums_vector[i]
if( (first %in% nums_vector) & (second %in% nums_vector) ){
indexes <- c(first, second)
print(indexes)
}
}
}
library(hash)
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
h <- hash()
vec <- c()
for(i in seq_along(nums_vector)) {
vec[i] <- target - nums_vector[i]
h[nums_vector[i]] <- vec[i]
if(as.character(nums_vector[i]) %in% keys(h)) {
first <- h[[as.character(nums_vector[i])]]
second <- nums_vector[i]
if( (first %in% nums_vector) & (second %in% nums_vector) ){
indexes <- c(first, second)
print(indexes)
}
}
}
h
h
h
h <- hash()
vec <- c()
for(i in seq_along(nums_vector)) {
vec[i] <- target - nums_vector[i]
h[nums_vector[i]] <- vec[i]
if(as.character(nums_vector[i]) %in% keys(h)) {
first <- h[[as.character(nums_vector[i])]]
second <- nums_vector[i]
if( (first %in% nums_vector) & (second %in% nums_vector) ){
indexes <- c(first, second)
print(indexes)
}
}
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
h <- hash()
vec <- c()
for(i in seq_along(nums_vector)) {
vec[i] <- target - nums_vector[i]
h[nums_vector[i]] <- vec[i]
if(as.character(nums_vector[i]) %in% keys(h)) {
first <- h[[as.character(nums_vector[i])]]
second <- nums_vector[i]
if( (first %in% nums_vector) & (second %in% nums_vector) ){
indexes <- c(first, second)
print(indexes)
}
}
}
h
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
h <- hash()
vec <- c()
for(i in seq_along(nums_vector)) {
vec[i] <- target - nums_vector[i]
h[nums_vector[i]] <- vec[i]
}
h
seq_along(h)
keys(h)
keys(h)
library(hash)
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
h <- hash()
vec <- c()
for(i in seq_along(nums_vector)) {
vec[i] <- target - nums_vector[i]
h[nums_vector[i]] <- vec[i]
}
h
seq_along(keys(h))
hash_map <- list(h)
hash_map
names.hash(h)
library(hash)
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
h <- hash()
vec <- c()
for(i in seq_along(nums_vector)) {
vec[i] <- target - nums_vector[i]
h[nums_vector[i]] <- vec[i]
}
h
names.hash(h)
length(h)
h
nums_vector
values(h)
?hash
as.list(h)
hash_map <- as.list(h)
hash_map
keys(y)
keys(h)
values(h)
test <- values(h)
test[1]
for(i in seq_along(h)){
if(nums_vector[i] %in% values(h)){
first <- h[[as.character(nums_vector[i])]]
second <- nums_vector[i]
if( (first %in% nums_vector) & (second %in% nums_vector) ){
indexes <- c(first, second)
print(indexes)
}
}
}
values(h)[i]
for(i in seq_along(h)){
if(values(h) %in% nums_vector[i]){
first <- h[[as.character(nums_vector[i])]]
second <- nums_vector[i]
if( (first %in% nums_vector) & (second %in% nums_vector) ){
indexes <- c(first, second)
print(indexes)
}
}}
for(i in seq_along(h)){
if(values(h)[i] %in% nums_vector){
first <- h[[as.character(nums_vector[i])]]
second <- nums_vector[i]
if( (first %in% nums_vector) & (second %in% nums_vector) ){
indexes <- c(first, second)
print(indexes)
}
}}
values(h)
h[[as.character(nums_vector[i])]]
for(i in seq_along(h)){
if(values(h)[i] %in% nums_vector){
first <- h[[as.character(nums_vector[i])]]
second <- values(h)[i]
if( (first %in% nums_vector) & (second %in% nums_vector) ){
indexes <- c(first, second)
print(indexes)
}
}}
for(i in seq_along(h)){
if(values(h)[i] %in% nums_vector){
first <- h[[as.character(nums_vector[i])]]
second <- nums_vector[i]
if( (first %in% nums_vector) & (second %in% nums_vector) ){
indexes <- c(first, second)
print(indexes)
}
}}
for(i in seq_along(h)){
if(values(h)[i] %in% nums_vector){
first <- h[[as.character(nums_vector[i])]]
second <- nums_vector[i]
if( (first %in% values(h)) & (second %in% values(h)) ){
indexes <- c(first, second)
print(indexes)
}
}}
h <- hash()
vec <- c()
for(i in seq_along(nums_vector)) {
vec[i] <- target - nums_vector[i]
h[vec[i]] <- vec[i]nums_vector[i]
}
library(hash)
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 15
h <- hash()
vec <- c()
for(i in seq_along(nums_vector)) {
vec[i] <- target - nums_vector[i]
h[vec[i]] <- nums_vector[i]
}
for(i in seq_along(h)){
if(values(h)[i] %in% nums_vector){
first <- h[[as.character(nums_vector[i])]]
second <- nums_vector[i]
if( (first %in% nums_vector) & (second %in% nums_vector) ){
indexes <- c(first, second)
print(indexes)
}
}}
for(i in seq_along(h)){
if(as.character( nums_vector)[i] %in% keys(h)){
first <- h[[as.character(nums_vector[i])]]
second <- nums_vector[i]
if( (first %in% nums_vector) & (second %in% nums_vector) ){
indexes <- c(first, second)
print(indexes)
}
}}
